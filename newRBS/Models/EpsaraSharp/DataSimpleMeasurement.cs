// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Epsara {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class DataSimpleMeasurement : Epsara.DataMeasurement {

		[Obsolete]
		protected DataSimpleMeasurement(GLib.GType gtype) : base(gtype) {}
		public DataSimpleMeasurement(IntPtr raw) : base(raw) {}

		[DllImport("libepsara-0.dll")]
		static extern IntPtr epsara_data_simple_measurement_new();

		public DataSimpleMeasurement () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (DataSimpleMeasurement)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = epsara_data_simple_measurement_new();
		}

		[GLib.Property ("calculate-noise")]
		public bool CalculateNoise {
			get {
				GLib.Value val = GetProperty ("calculate-noise");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("calculate-noise", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("mass-no-inc-ion")]
		public int MassNoIncIon {
			get {
				GLib.Value val = GetProperty ("mass-no-inc-ion");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("mass-no-inc-ion", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("measured-spectrum")]
		public Epsara.DataMatrix MeasuredSpectrum {
			get {
				GLib.Value val = GetProperty ("measured-spectrum");
				Epsara.DataMatrix ret = (Epsara.DataMatrix) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("measured-spectrum", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("ode-in-init-prec")]
		public double OdeInInitPrec {
			get {
				GLib.Value val = GetProperty ("ode-in-init-prec");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("ode-in-init-prec", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("ion-energy")]
		public double IonEnergy {
			get {
				GLib.Value val = GetProperty ("ion-energy");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("ion-energy", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("cali-energy-per-channel-cube")]
		public double CaliEnergyPerChannelCube {
			get {
				GLib.Value val = GetProperty ("cali-energy-per-channel-cube");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("cali-energy-per-channel-cube", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("cali-energy-offset")]
		public double CaliEnergyOffset {
			get {
				GLib.Value val = GetProperty ("cali-energy-offset");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("cali-energy-offset", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("ode-in-max-prec")]
		public double OdeInMaxPrec {
			get {
				GLib.Value val = GetProperty ("ode-in-max-prec");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("ode-in-max-prec", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("ode-out-max-prec")]
		public double OdeOutMaxPrec {
			get {
				GLib.Value val = GetProperty ("ode-out-max-prec");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("ode-out-max-prec", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("out-angle-theta")]
		public double OutAngleTheta {
			get {
				GLib.Value val = GetProperty ("out-angle-theta");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("out-angle-theta", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("cali-energy-per-channel-square")]
		public double CaliEnergyPerChannelSquare {
			get {
				GLib.Value val = GetProperty ("cali-energy-per-channel-square");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("cali-energy-per-channel-square", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("inc-angle-phi")]
		public double IncAnglePhi {
			get {
				GLib.Value val = GetProperty ("inc-angle-phi");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("inc-angle-phi", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("pos-lateral-x")]
		public double PosLateralX {
			get {
				GLib.Value val = GetProperty ("pos-lateral-x");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("pos-lateral-x", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("pos-lateral-y")]
		public double PosLateralY {
			get {
				GLib.Value val = GetProperty ("pos-lateral-y");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("pos-lateral-y", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("cali-energy-per-channel")]
		public double CaliEnergyPerChannel {
			get {
				GLib.Value val = GetProperty ("cali-energy-per-channel");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("cali-energy-per-channel", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("solid-angle")]
		public double SolidAngle {
			get {
				GLib.Value val = GetProperty ("solid-angle");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("solid-angle", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("charge-state")]
		public int ChargeState {
			get {
				GLib.Value val = GetProperty ("charge-state");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("charge-state", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("out-angle-phi")]
		public double OutAnglePhi {
			get {
				GLib.Value val = GetProperty ("out-angle-phi");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("out-angle-phi", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("pos-angle-psi")]
		public double PosAnglePsi {
			get {
				GLib.Value val = GetProperty ("pos-angle-psi");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("pos-angle-psi", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("inc-angle-theta")]
		public double IncAngleTheta {
			get {
				GLib.Value val = GetProperty ("inc-angle-theta");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("inc-angle-theta", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("channel-min")]
		public uint ChannelMin {
			get {
				GLib.Value val = GetProperty ("channel-min");
				uint ret = (uint) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("channel-min", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("detector-dead-layer")]
		public double DetectorDeadLayer {
			get {
				GLib.Value val = GetProperty ("detector-dead-layer");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("detector-dead-layer", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("ode-out-init-prec")]
		public double OdeOutInitPrec {
			get {
				GLib.Value val = GetProperty ("ode-out-init-prec");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("ode-out-init-prec", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("atomic-no-inc-ion")]
		public int AtomicNoIncIon {
			get {
				GLib.Value val = GetProperty ("atomic-no-inc-ion");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("atomic-no-inc-ion", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("detector-resolution")]
		public double DetectorResolution {
			get {
				GLib.Value val = GetProperty ("detector-resolution");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("detector-resolution", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("q-value-energy")]
		public double QValueEnergy {
			get {
				GLib.Value val = GetProperty ("q-value-energy");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("q-value-energy", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("calced-spectrum")]
		public Epsara.DataMatrix CalcedSpectrum {
			get {
				GLib.Value val = GetProperty ("calced-spectrum");
				Epsara.DataMatrix ret = (Epsara.DataMatrix) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("calced-spectrum", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("channel-max")]
		public uint ChannelMax {
			get {
				GLib.Value val = GetProperty ("channel-max");
				uint ret = (uint) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("channel-max", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("const-eloss")]
		public int ConstEloss {
			get {
				GLib.Value val = GetProperty ("const-eloss");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("const-eloss", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("ion-fluence")]
		public double IonFluence {
			get {
				GLib.Value val = GetProperty ("ion-fluence");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("ion-fluence", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("header")]
		public string Header {
			get {
				GLib.Value val = GetProperty ("header");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("header", val);
				val.Dispose ();
			}
		}

		[DllImport("libepsara-0.dll")]
		static extern IntPtr epsara_data_simple_measurement_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = epsara_data_simple_measurement_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
