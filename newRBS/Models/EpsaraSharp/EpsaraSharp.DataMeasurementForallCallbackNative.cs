// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace EpsaraSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[GLib.CDeclCallback]
	internal delegate void DataMeasurementForallCallbackNative(IntPtr measurement_data, IntPtr data);

	internal class DataMeasurementForallCallbackInvoker {

		DataMeasurementForallCallbackNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~DataMeasurementForallCallbackInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal DataMeasurementForallCallbackInvoker (DataMeasurementForallCallbackNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal DataMeasurementForallCallbackInvoker (DataMeasurementForallCallbackNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal DataMeasurementForallCallbackInvoker (DataMeasurementForallCallbackNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal Epsara.DataMeasurementForallCallback Handler {
			get {
				return new Epsara.DataMeasurementForallCallback(InvokeNative);
			}
		}

		void InvokeNative (Epsara.DataMeasurement measurement_data)
		{
			native_cb (measurement_data == null ? IntPtr.Zero : measurement_data.Handle, __data);
		}
	}

	internal class DataMeasurementForallCallbackWrapper {

		public void NativeCallback (IntPtr measurement_data, IntPtr data)
		{
			try {
				managed (GLib.Object.GetObject(measurement_data) as Epsara.DataMeasurement);
				if (release_on_call)
					gch.Free ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal DataMeasurementForallCallbackNative NativeDelegate;
		Epsara.DataMeasurementForallCallback managed;

		public DataMeasurementForallCallbackWrapper (Epsara.DataMeasurementForallCallback managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new DataMeasurementForallCallbackNative (NativeCallback);
		}

		public static Epsara.DataMeasurementForallCallback GetManagedDelegate (DataMeasurementForallCallbackNative native)
		{
			if (native == null)
				return null;
			DataMeasurementForallCallbackWrapper wrapper = (DataMeasurementForallCallbackWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
