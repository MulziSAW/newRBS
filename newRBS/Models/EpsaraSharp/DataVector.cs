// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Epsara {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class DataVector : GLib.Object {

		[Obsolete]
		protected DataVector(GLib.GType gtype) : base(gtype) {}
		public DataVector(IntPtr raw) : base(raw) {}

		[DllImport("C:/Users/user/Desktop/epsara-sharp-minexample/visual_studio_proj/EpsaraSharpXmpl/EpsaraSharpXmpl/bin/Debug/libepsara-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr epsara_data_vector_new(int size);

		public DataVector (int size) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (DataVector)) {
				ArrayList vals = new ArrayList();
				ArrayList names = new ArrayList();
				names.Add ("size");
				vals.Add (new GLib.Value (size));
				CreateNativeObject ((string[])names.ToArray (typeof (string)), (GLib.Value[])vals.ToArray (typeof (GLib.Value)));
				return;
			}
			Raw = epsara_data_vector_new(size);
		}

		[GLib.Property ("size")]
		public int Size {
			get {
				GLib.Value val = GetProperty ("size");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("size", val);
				val.Dispose ();
			}
		}

    [DllImport("libepsara-0.dll", CallingConvention = CallingConvention.Cdecl)]
    static extern double epsara_data_vector_get(IntPtr raw, int i);

    [DllImport("libepsara-0.dll", CallingConvention = CallingConvention.Cdecl)]
    static extern void epsara_data_vector_set(IntPtr raw, int i, double x);

    public double this[int i]
    {
        get
        {
            double raw_ret = epsara_data_vector_get(Handle, i);
            double ret = raw_ret;
            return ret;
        }
        set
        {
            epsara_data_vector_set(Handle, i, value);
        }
    }



		[DllImport("libepsara-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void epsara_data_vector_set_all(IntPtr raw, double x);

		public double All { 
			set {
				epsara_data_vector_set_all(Handle, value);
			}
		}

		[DllImport("libepsara-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void epsara_data_vector_set_zero(IntPtr raw);

		public void SetZero() {
			epsara_data_vector_set_zero(Handle);
		}

		[DllImport("libepsara-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int epsara_data_vector_max_index(IntPtr raw);

		public int MaxIndex() {
			int raw_ret = epsara_data_vector_max_index(Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libepsara-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void epsara_data_vector_minmax(IntPtr raw, out double min_out, out double max_out);

		public void Minmax(out double min_out, out double max_out) {
			epsara_data_vector_minmax(Handle, out min_out, out max_out);
		}

		[DllImport("libepsara-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int epsara_data_vector_add_constant(IntPtr raw, double x);

		public int AddConstant(double x) {
			int raw_ret = epsara_data_vector_add_constant(Handle, x);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libepsara-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int epsara_data_vector_div(IntPtr raw, IntPtr b);

		public int Div(Epsara.DataVector b) {
			int raw_ret = epsara_data_vector_div(Handle, b == null ? IntPtr.Zero : b.Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libepsara-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int epsara_data_vector_mul(IntPtr raw, IntPtr b);

		public int Mul(Epsara.DataVector b) {
			int raw_ret = epsara_data_vector_mul(Handle, b == null ? IntPtr.Zero : b.Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libepsara-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double epsara_data_vector_max(IntPtr raw);

		public double Max() {
			double raw_ret = epsara_data_vector_max(Handle);
			double ret = raw_ret;
			return ret;
		}

		[DllImport("libepsara-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void epsara_data_vector_minmax_index(IntPtr raw, out int imin, out int imax);

		public void MinmaxIndex(out int imin, out int imax) {
			epsara_data_vector_minmax_index(Handle, out imin, out imax);
		}

		[DllImport("libepsara-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int epsara_data_vector_swap(IntPtr raw, IntPtr w);

		public int Swap(Epsara.DataVector w) {
			int raw_ret = epsara_data_vector_swap(Handle, w == null ? IntPtr.Zero : w.Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libepsara-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int epsara_data_vector_reverse(IntPtr raw);

		public int Reverse() {
			int raw_ret = epsara_data_vector_reverse(Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libepsara-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int epsara_data_vector_swap_elements(IntPtr raw, int i, int j);

		public int SwapElements(int i, int j) {
			int raw_ret = epsara_data_vector_swap_elements(Handle, i, j);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libepsara-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int epsara_data_vector_add(IntPtr raw, IntPtr b);

		public int Add(Epsara.DataVector b) {
			int raw_ret = epsara_data_vector_add(Handle, b == null ? IntPtr.Zero : b.Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libepsara-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int epsara_data_vector_min_index(IntPtr raw);

		public int MinIndex() {
			int raw_ret = epsara_data_vector_min_index(Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libepsara-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int epsara_data_vector_set_basis(IntPtr raw, int i);

		public int SetBasis(int i) {
			int raw_ret = epsara_data_vector_set_basis(Handle, i);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libepsara-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double epsara_data_vector_min(IntPtr raw);

		public double Min() {
			double raw_ret = epsara_data_vector_min(Handle);
			double ret = raw_ret;
			return ret;
		}

		[DllImport("libepsara-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int epsara_data_vector_scale(IntPtr raw, double x);

		public int Scale(double x) {
			int raw_ret = epsara_data_vector_scale(Handle, x);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libepsara-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr epsara_data_vector_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = epsara_data_vector_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libepsara-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int epsara_data_vector_sub(IntPtr raw, IntPtr b);

		public int Sub(Epsara.DataVector b) {
			int raw_ret = epsara_data_vector_sub(Handle, b == null ? IntPtr.Zero : b.Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libepsara-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int epsara_data_vector_copy(IntPtr raw, IntPtr src);

		public int Copy(Epsara.DataVector src) {
			int raw_ret = epsara_data_vector_copy(Handle, src == null ? IntPtr.Zero : src.Handle);
			int ret = raw_ret;
			return ret;
		}

#endregion
	}
}
