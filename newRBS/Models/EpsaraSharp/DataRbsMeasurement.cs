// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Epsara {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class DataRbsMeasurement : Epsara.DataMeasurement {

		[Obsolete]
		protected DataRbsMeasurement(GLib.GType gtype) : base(gtype) {}
		public DataRbsMeasurement(IntPtr raw) : base(raw) {}

		protected DataRbsMeasurement() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("libepsara-0.dll")]
		static extern IntPtr epsara_data_rbs_measurement_get_detectors(IntPtr raw);

		public GLib.SList Detectors { 
			get {
				IntPtr raw_ret = epsara_data_rbs_measurement_get_detectors(Handle);
				GLib.SList ret = new GLib.SList(raw_ret);
				return ret;
			}
		}

		[DllImport("libepsara-0.dll")]
		static extern void epsara_data_rbs_measurement_reset_full_spectra(IntPtr raw, IntPtr beam, IntPtr detector);

		public void ResetFullSpectra(Epsara.DataBeam beam, Epsara.DataDetector detector) {
			epsara_data_rbs_measurement_reset_full_spectra(Handle, beam == null ? IntPtr.Zero : beam.Handle, detector == null ? IntPtr.Zero : detector.Handle);
		}

		[DllImport("libepsara-0.dll")]
		static extern bool epsara_data_rbs_measurement_perform_calculation(IntPtr raw);

		public new bool PerformCalculation() {
			bool raw_ret = epsara_data_rbs_measurement_perform_calculation(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libepsara-0.dll")]
		static extern void epsara_data_rbs_measurement_reset_spectra_of_beam_detector(IntPtr raw, IntPtr beam, IntPtr detector);

		public void ResetSpectraOfBeamDetector(Epsara.DataBeam beam, Epsara.DataDetector detector) {
			epsara_data_rbs_measurement_reset_spectra_of_beam_detector(Handle, beam == null ? IntPtr.Zero : beam.Handle, detector == null ? IntPtr.Zero : detector.Handle);
		}

		[DllImport("libepsara-0.dll")]
		static extern void epsara_data_rbs_measurement_reset_eloss_of_beam(IntPtr raw, IntPtr beam);

		public void ResetElossOfBeam(Epsara.DataBeam beam) {
			epsara_data_rbs_measurement_reset_eloss_of_beam(Handle, beam == null ? IntPtr.Zero : beam.Handle);
		}

		[DllImport("libepsara-0.dll")]
		static extern void epsara_data_rbs_measurement_reset_eloss_of_detector(IntPtr raw, IntPtr detector);

		public void ResetElossOfDetector(Epsara.DataDetector detector) {
			epsara_data_rbs_measurement_reset_eloss_of_detector(Handle, detector == null ? IntPtr.Zero : detector.Handle);
		}

		[DllImport("libepsara-0.dll")]
		static extern IntPtr epsara_data_rbs_measurement_get_beams(IntPtr raw);

		public GLib.SList Beams { 
			get {
				IntPtr raw_ret = epsara_data_rbs_measurement_get_beams(Handle);
				GLib.SList ret = new GLib.SList(raw_ret);
				return ret;
			}
		}

		[DllImport("libepsara-0.dll")]
		static extern IntPtr epsara_data_rbs_measurement_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = epsara_data_rbs_measurement_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libepsara-0.dll")]
		static extern IntPtr epsara_data_rbs_measurement_get_materials(IntPtr raw);

		public GLib.SList Materials { 
			get {
				IntPtr raw_ret = epsara_data_rbs_measurement_get_materials(Handle);
				GLib.SList ret = new GLib.SList(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
