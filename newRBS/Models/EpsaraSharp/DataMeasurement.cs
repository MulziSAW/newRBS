// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Epsara {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class DataMeasurement : GLib.Object {

		[Obsolete]
		protected DataMeasurement(GLib.GType gtype) : base(gtype) {}
		public DataMeasurement(IntPtr raw) : base(raw) {}

		protected DataMeasurement() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[GLib.Property ("duration-time-year")]
		public double DurationTimeYear {
			get {
				GLib.Value val = GetProperty ("duration-time-year");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("duration-time-year", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("duration-time-hour")]
		public double DurationTimeHour {
			get {
				GLib.Value val = GetProperty ("duration-time-hour");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("duration-time-hour", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("start-time-year")]
		public double StartTimeYear {
			get {
				GLib.Value val = GetProperty ("start-time-year");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("start-time-year", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("stop-time-day")]
		public double StopTimeDay {
			get {
				GLib.Value val = GetProperty ("stop-time-day");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("stop-time-day", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("duration-time-month")]
		public double DurationTimeMonth {
			get {
				GLib.Value val = GetProperty ("duration-time-month");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("duration-time-month", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("stop-time-month")]
		public double StopTimeMonth {
			get {
				GLib.Value val = GetProperty ("stop-time-month");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("stop-time-month", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("duration-time-minute")]
		public double DurationTimeMinute {
			get {
				GLib.Value val = GetProperty ("duration-time-minute");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("duration-time-minute", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("start-time-minute")]
		public double StartTimeMinute {
			get {
				GLib.Value val = GetProperty ("start-time-minute");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("start-time-minute", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("stop-time-year")]
		public double StopTimeYear {
			get {
				GLib.Value val = GetProperty ("stop-time-year");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("stop-time-year", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("stop-time-hour")]
		public double StopTimeHour {
			get {
				GLib.Value val = GetProperty ("stop-time-hour");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("stop-time-hour", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("duration-time-second")]
		public double DurationTimeSecond {
			get {
				GLib.Value val = GetProperty ("duration-time-second");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("duration-time-second", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("start-time-second")]
		public double StartTimeSecond {
			get {
				GLib.Value val = GetProperty ("start-time-second");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("start-time-second", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("start-time-month")]
		public double StartTimeMonth {
			get {
				GLib.Value val = GetProperty ("start-time-month");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("start-time-month", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("start-time-day")]
		public double StartTimeDay {
			get {
				GLib.Value val = GetProperty ("start-time-day");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("start-time-day", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("stop-time-minute")]
		public double StopTimeMinute {
			get {
				GLib.Value val = GetProperty ("stop-time-minute");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("stop-time-minute", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("stop-time-second")]
		public double StopTimeSecond {
			get {
				GLib.Value val = GetProperty ("stop-time-second");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("stop-time-second", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("start-time-hour")]
		public double StartTimeHour {
			get {
				GLib.Value val = GetProperty ("start-time-hour");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("start-time-hour", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("id")]
		public int Id {
			get {
				GLib.Value val = GetProperty ("id");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("id", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("duration-time-day")]
		public double DurationTimeDay {
			get {
				GLib.Value val = GetProperty ("duration-time-day");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("duration-time-day", val);
				val.Dispose ();
			}
		}

		[DllImport("libepsara-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void epsara_data_measurement_remove(IntPtr raw, IntPtr objekt);

		public void Remove(GLib.Object objekt) {
			epsara_data_measurement_remove(Handle, objekt == null ? IntPtr.Zero : objekt.Handle);
		}

		[DllImport("libepsara-0.dll")]
		static extern IntPtr epsara_data_measurement_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = epsara_data_measurement_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libepsara-0.dll")]
		static extern bool epsara_data_measurement_recalculate(IntPtr raw);

		public bool Recalculate() {
			bool raw_ret = epsara_data_measurement_recalculate(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libepsara-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void epsara_data_measurement_add(IntPtr raw, IntPtr objekt);

		public void Add(GLib.Object objekt) {
			epsara_data_measurement_add(Handle, objekt == null ? IntPtr.Zero : objekt.Handle);
		}

		[DllImport("libepsara-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool epsara_data_measurement_calculate(IntPtr raw);

		public bool Calculate() {

            bool raw_ret = epsara_data_measurement_calculate(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libepsara-0.dll")]
		static extern bool epsara_data_measurement_is_fittable(IntPtr raw);

		public bool IsFittable { 
			get {
				bool raw_ret = epsara_data_measurement_is_fittable(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libepsara-0.dll")]
		static extern bool epsara_data_measurement_perform_calculation(IntPtr raw);

		public bool PerformCalculation() {
			bool raw_ret = epsara_data_measurement_perform_calculation(Handle);
			bool ret = raw_ret;
			return ret;
		}

#endregion
	}
}
