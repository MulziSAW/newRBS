#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace newRBS.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="newRBSadmin_db")]
	public partial class DatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnCreated();
    partial void InsertElement(Element instance);
    partial void UpdateElement(Element instance);
    partial void DeleteElement(Element instance);
    partial void InsertMaterial(Material instance);
    partial void UpdateMaterial(Material instance);
    partial void DeleteMaterial(Material instance);
    partial void InsertLayer(Layer instance);
    partial void UpdateLayer(Layer instance);
    partial void DeleteLayer(Layer instance);
    partial void InsertSample(Sample instance);
    partial void UpdateSample(Sample instance);
    partial void DeleteSample(Sample instance);
    partial void InsertMeasurement_Project(Measurement_Project instance);
    partial void UpdateMeasurement_Project(Measurement_Project instance);
    partial void DeleteMeasurement_Project(Measurement_Project instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertMeasurement(Measurement instance);
    partial void UpdateMeasurement(Measurement instance);
    partial void DeleteMeasurement(Measurement instance);
    #endregion
		
		public DatabaseDataContext() : 
				base(global::newRBS.Properties.Settings.Default.newRBSadmin_dbConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Element> Elements
		{
			get
			{
				return this.GetTable<Element>();
			}
		}
		
		public System.Data.Linq.Table<Material> Materials
		{
			get
			{
				return this.GetTable<Material>();
			}
		}
		
		public System.Data.Linq.Table<Layer> Layers
		{
			get
			{
				return this.GetTable<Layer>();
			}
		}
		
		public System.Data.Linq.Table<Sample> Samples
		{
			get
			{
				return this.GetTable<Sample>();
			}
		}
		
		public System.Data.Linq.Table<Measurement_Project> Measurement_Projects
		{
			get
			{
				return this.GetTable<Measurement_Project>();
			}
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<Measurement> Measurements
		{
			get
			{
				return this.GetTable<Measurement>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Elements")]
	public partial class Element : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ElementID;
		
		private int _LayerID;
		
		private int _MaterialID;
		
		private string _ElementName;
		
		private double _StoichiometricFactor;
		
		private double _AtomicNumber;
		
		private double _MassNumber;
		
		private EntityRef<Material> _Material;
		
		private EntityRef<Layer> _Layer;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnElementIDChanging(int value);
    partial void OnElementIDChanged();
    partial void OnLayerIDChanging(int value);
    partial void OnLayerIDChanged();
    partial void OnMaterialIDChanging(int value);
    partial void OnMaterialIDChanged();
    partial void OnElementNameChanging(string value);
    partial void OnElementNameChanged();
    partial void OnStoichiometricFactorChanging(double value);
    partial void OnStoichiometricFactorChanged();
    partial void OnAtomicNumberChanging(double value);
    partial void OnAtomicNumberChanged();
    partial void OnMassNumberChanging(double value);
    partial void OnMassNumberChanged();
    #endregion
		
		public Element()
		{
			this._Material = default(EntityRef<Material>);
			this._Layer = default(EntityRef<Layer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ElementID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ElementID
		{
			get
			{
				return this._ElementID;
			}
			set
			{
				if ((this._ElementID != value))
				{
					this.OnElementIDChanging(value);
					this.SendPropertyChanging();
					this._ElementID = value;
					this.SendPropertyChanged("ElementID");
					this.OnElementIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LayerID", DbType="Int NOT NULL")]
		public int LayerID
		{
			get
			{
				return this._LayerID;
			}
			set
			{
				if ((this._LayerID != value))
				{
					if (this._Layer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLayerIDChanging(value);
					this.SendPropertyChanging();
					this._LayerID = value;
					this.SendPropertyChanged("LayerID");
					this.OnLayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialID", DbType="Int NOT NULL")]
		public int MaterialID
		{
			get
			{
				return this._MaterialID;
			}
			set
			{
				if ((this._MaterialID != value))
				{
					if (this._Material.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialID = value;
					this.SendPropertyChanged("MaterialID");
					this.OnMaterialIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ElementName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ElementName
		{
			get
			{
				return this._ElementName;
			}
			set
			{
				if ((this._ElementName != value))
				{
					this.OnElementNameChanging(value);
					this.SendPropertyChanging();
					this._ElementName = value;
					this.SendPropertyChanged("ElementName");
					this.OnElementNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoichiometricFactor", DbType="Float NOT NULL")]
		public double StoichiometricFactor
		{
			get
			{
				return this._StoichiometricFactor;
			}
			set
			{
				if ((this._StoichiometricFactor != value))
				{
					this.OnStoichiometricFactorChanging(value);
					this.SendPropertyChanging();
					this._StoichiometricFactor = value;
					this.SendPropertyChanged("StoichiometricFactor");
					this.OnStoichiometricFactorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AtomicNumber", DbType="Float NOT NULL")]
		public double AtomicNumber
		{
			get
			{
				return this._AtomicNumber;
			}
			set
			{
				if ((this._AtomicNumber != value))
				{
					this.OnAtomicNumberChanging(value);
					this.SendPropertyChanging();
					this._AtomicNumber = value;
					this.SendPropertyChanged("AtomicNumber");
					this.OnAtomicNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MassNumber", DbType="Float NOT NULL")]
		public double MassNumber
		{
			get
			{
				return this._MassNumber;
			}
			set
			{
				if ((this._MassNumber != value))
				{
					this.OnMassNumberChanging(value);
					this.SendPropertyChanging();
					this._MassNumber = value;
					this.SendPropertyChanged("MassNumber");
					this.OnMassNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_Element", Storage="_Material", ThisKey="MaterialID", OtherKey="MaterialID", IsForeignKey=true)]
		public Material Material
		{
			get
			{
				return this._Material.Entity;
			}
			set
			{
				Material previousValue = this._Material.Entity;
				if (((previousValue != value) 
							|| (this._Material.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Material.Entity = null;
						previousValue.Elements.Remove(this);
					}
					this._Material.Entity = value;
					if ((value != null))
					{
						value.Elements.Add(this);
						this._MaterialID = value.MaterialID;
					}
					else
					{
						this._MaterialID = default(int);
					}
					this.SendPropertyChanged("Material");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Layer_Element", Storage="_Layer", ThisKey="LayerID", OtherKey="LayerID", IsForeignKey=true)]
		public Layer Layer
		{
			get
			{
				return this._Layer.Entity;
			}
			set
			{
				Layer previousValue = this._Layer.Entity;
				if (((previousValue != value) 
							|| (this._Layer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Layer.Entity = null;
						previousValue.Elements.Remove(this);
					}
					this._Layer.Entity = value;
					if ((value != null))
					{
						value.Elements.Add(this);
						this._LayerID = value.LayerID;
					}
					else
					{
						this._LayerID = default(int);
					}
					this.SendPropertyChanged("Layer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Materials")]
	public partial class Material : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaterialID;
		
		private string _MaterialName;
		
		private EntitySet<Element> _Elements;
		
		private EntitySet<Layer> _Layers;
		
		private EntitySet<Sample> _Samples;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaterialIDChanging(int value);
    partial void OnMaterialIDChanged();
    partial void OnMaterialNameChanging(string value);
    partial void OnMaterialNameChanged();
    #endregion
		
		public Material()
		{
			this._Elements = new EntitySet<Element>(new Action<Element>(this.attach_Elements), new Action<Element>(this.detach_Elements));
			this._Layers = new EntitySet<Layer>(new Action<Layer>(this.attach_Layers), new Action<Layer>(this.detach_Layers));
			this._Samples = new EntitySet<Sample>(new Action<Sample>(this.attach_Samples), new Action<Sample>(this.detach_Samples));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaterialID
		{
			get
			{
				return this._MaterialID;
			}
			set
			{
				if ((this._MaterialID != value))
				{
					this.OnMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialID = value;
					this.SendPropertyChanged("MaterialID");
					this.OnMaterialIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialName", DbType="NVarChar(50)")]
		public string MaterialName
		{
			get
			{
				return this._MaterialName;
			}
			set
			{
				if ((this._MaterialName != value))
				{
					this.OnMaterialNameChanging(value);
					this.SendPropertyChanging();
					this._MaterialName = value;
					this.SendPropertyChanged("MaterialName");
					this.OnMaterialNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_Element", Storage="_Elements", ThisKey="MaterialID", OtherKey="MaterialID")]
		public EntitySet<Element> Elements
		{
			get
			{
				return this._Elements;
			}
			set
			{
				this._Elements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_Layer", Storage="_Layers", ThisKey="MaterialID", OtherKey="MaterialID")]
		public EntitySet<Layer> Layers
		{
			get
			{
				return this._Layers;
			}
			set
			{
				this._Layers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_Sample", Storage="_Samples", ThisKey="MaterialID", OtherKey="MaterialID")]
		public EntitySet<Sample> Samples
		{
			get
			{
				return this._Samples;
			}
			set
			{
				this._Samples.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Elements(Element entity)
		{
			this.SendPropertyChanging();
			entity.Material = this;
		}
		
		private void detach_Elements(Element entity)
		{
			this.SendPropertyChanging();
			entity.Material = null;
		}
		
		private void attach_Layers(Layer entity)
		{
			this.SendPropertyChanging();
			entity.Material = this;
		}
		
		private void detach_Layers(Layer entity)
		{
			this.SendPropertyChanging();
			entity.Material = null;
		}
		
		private void attach_Samples(Sample entity)
		{
			this.SendPropertyChanging();
			entity.Material = this;
		}
		
		private void detach_Samples(Sample entity)
		{
			this.SendPropertyChanging();
			entity.Material = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Layers")]
	public partial class Layer : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LayerID;
		
		private System.Nullable<int> _MaterialID;
		
		private int _LayerIndex;
		
		private string _LayerName;
		
		private double _Density;
		
		private double _Thickness;
		
		private EntitySet<Element> _Elements;
		
		private EntityRef<Material> _Material;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLayerIDChanging(int value);
    partial void OnLayerIDChanged();
    partial void OnMaterialIDChanging(System.Nullable<int> value);
    partial void OnMaterialIDChanged();
    partial void OnLayerIndexChanging(int value);
    partial void OnLayerIndexChanged();
    partial void OnLayerNameChanging(string value);
    partial void OnLayerNameChanged();
    partial void OnDensityChanging(double value);
    partial void OnDensityChanged();
    partial void OnThicknessChanging(double value);
    partial void OnThicknessChanged();
    #endregion
		
		public Layer()
		{
			this._Elements = new EntitySet<Element>(new Action<Element>(this.attach_Elements), new Action<Element>(this.detach_Elements));
			this._Material = default(EntityRef<Material>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LayerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LayerID
		{
			get
			{
				return this._LayerID;
			}
			set
			{
				if ((this._LayerID != value))
				{
					this.OnLayerIDChanging(value);
					this.SendPropertyChanging();
					this._LayerID = value;
					this.SendPropertyChanged("LayerID");
					this.OnLayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialID", DbType="Int")]
		public System.Nullable<int> MaterialID
		{
			get
			{
				return this._MaterialID;
			}
			set
			{
				if ((this._MaterialID != value))
				{
					if (this._Material.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialID = value;
					this.SendPropertyChanged("MaterialID");
					this.OnMaterialIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LayerIndex", DbType="Int NOT NULL")]
		public int LayerIndex
		{
			get
			{
				return this._LayerIndex;
			}
			set
			{
				if ((this._LayerIndex != value))
				{
					this.OnLayerIndexChanging(value);
					this.SendPropertyChanging();
					this._LayerIndex = value;
					this.SendPropertyChanged("LayerIndex");
					this.OnLayerIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LayerName", DbType="NVarChar(50)")]
		public string LayerName
		{
			get
			{
				return this._LayerName;
			}
			set
			{
				if ((this._LayerName != value))
				{
					this.OnLayerNameChanging(value);
					this.SendPropertyChanging();
					this._LayerName = value;
					this.SendPropertyChanged("LayerName");
					this.OnLayerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Density", DbType="Float NOT NULL")]
		public double Density
		{
			get
			{
				return this._Density;
			}
			set
			{
				if ((this._Density != value))
				{
					this.OnDensityChanging(value);
					this.SendPropertyChanging();
					this._Density = value;
					this.SendPropertyChanged("Density");
					this.OnDensityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Thickness", DbType="Float NOT NULL")]
		public double Thickness
		{
			get
			{
				return this._Thickness;
			}
			set
			{
				if ((this._Thickness != value))
				{
					this.OnThicknessChanging(value);
					this.SendPropertyChanging();
					this._Thickness = value;
					this.SendPropertyChanged("Thickness");
					this.OnThicknessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Layer_Element", Storage="_Elements", ThisKey="LayerID", OtherKey="LayerID")]
		public EntitySet<Element> Elements
		{
			get
			{
				return this._Elements;
			}
			set
			{
				this._Elements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_Layer", Storage="_Material", ThisKey="MaterialID", OtherKey="MaterialID", IsForeignKey=true)]
		public Material Material
		{
			get
			{
				return this._Material.Entity;
			}
			set
			{
				Material previousValue = this._Material.Entity;
				if (((previousValue != value) 
							|| (this._Material.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Material.Entity = null;
						previousValue.Layers.Remove(this);
					}
					this._Material.Entity = value;
					if ((value != null))
					{
						value.Layers.Add(this);
						this._MaterialID = value.MaterialID;
					}
					else
					{
						this._MaterialID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Material");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Elements(Element entity)
		{
			this.SendPropertyChanging();
			entity.Layer = this;
		}
		
		private void detach_Elements(Element entity)
		{
			this.SendPropertyChanging();
			entity.Layer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Samples")]
	public partial class Sample : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SampleID;
		
		private string _SampleName;
		
		private System.Nullable<int> _MaterialID;
		
		private EntitySet<Measurement> _Measurements;
		
		private EntityRef<Material> _Material;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSampleIDChanging(int value);
    partial void OnSampleIDChanged();
    partial void OnSampleNameChanging(string value);
    partial void OnSampleNameChanged();
    partial void OnMaterialIDChanging(System.Nullable<int> value);
    partial void OnMaterialIDChanged();
    #endregion
		
		public Sample()
		{
			this._Measurements = new EntitySet<Measurement>(new Action<Measurement>(this.attach_Measurements), new Action<Measurement>(this.detach_Measurements));
			this._Material = default(EntityRef<Material>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SampleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SampleID
		{
			get
			{
				return this._SampleID;
			}
			set
			{
				if ((this._SampleID != value))
				{
					this.OnSampleIDChanging(value);
					this.SendPropertyChanging();
					this._SampleID = value;
					this.SendPropertyChanged("SampleID");
					this.OnSampleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SampleName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SampleName
		{
			get
			{
				return this._SampleName;
			}
			set
			{
				if ((this._SampleName != value))
				{
					this.OnSampleNameChanging(value);
					this.SendPropertyChanging();
					this._SampleName = value;
					this.SendPropertyChanged("SampleName");
					this.OnSampleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialID", DbType="Int")]
		public System.Nullable<int> MaterialID
		{
			get
			{
				return this._MaterialID;
			}
			set
			{
				if ((this._MaterialID != value))
				{
					if (this._Material.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialID = value;
					this.SendPropertyChanged("MaterialID");
					this.OnMaterialIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sample_Measurement", Storage="_Measurements", ThisKey="SampleID", OtherKey="SampleID")]
		public EntitySet<Measurement> Measurements
		{
			get
			{
				return this._Measurements;
			}
			set
			{
				this._Measurements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_Sample", Storage="_Material", ThisKey="MaterialID", OtherKey="MaterialID", IsForeignKey=true)]
		public Material Material
		{
			get
			{
				return this._Material.Entity;
			}
			set
			{
				Material previousValue = this._Material.Entity;
				if (((previousValue != value) 
							|| (this._Material.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Material.Entity = null;
						previousValue.Samples.Remove(this);
					}
					this._Material.Entity = value;
					if ((value != null))
					{
						value.Samples.Add(this);
						this._MaterialID = value.MaterialID;
					}
					else
					{
						this._MaterialID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Material");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Measurements(Measurement entity)
		{
			this.SendPropertyChanging();
			entity.Sample = this;
		}
		
		private void detach_Measurements(Measurement entity)
		{
			this.SendPropertyChanging();
			entity.Sample = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Measurement_Project")]
	public partial class Measurement_Project : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _MeasurementID;
		
		private int _ProjectID;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<Measurement> _Measurement;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMeasurementIDChanging(int value);
    partial void OnMeasurementIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    #endregion
		
		public Measurement_Project()
		{
			this._Project = default(EntityRef<Project>);
			this._Measurement = default(EntityRef<Measurement>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeasurementID", DbType="Int NOT NULL")]
		public int MeasurementID
		{
			get
			{
				return this._MeasurementID;
			}
			set
			{
				if ((this._MeasurementID != value))
				{
					if (this._Measurement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeasurementIDChanging(value);
					this.SendPropertyChanging();
					this._MeasurementID = value;
					this.SendPropertyChanged("MeasurementID");
					this.OnMeasurementIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL")]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Measurement_Project", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Measurement_Projects.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Measurement_Projects.Add(this);
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Measurement_Measurement_Project", Storage="_Measurement", ThisKey="MeasurementID", OtherKey="MeasurementID", IsForeignKey=true)]
		public Measurement Measurement
		{
			get
			{
				return this._Measurement.Entity;
			}
			set
			{
				Measurement previousValue = this._Measurement.Entity;
				if (((previousValue != value) 
							|| (this._Measurement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Measurement.Entity = null;
						previousValue.Measurement_Projects.Remove(this);
					}
					this._Measurement.Entity = value;
					if ((value != null))
					{
						value.Measurement_Projects.Add(this);
						this._MeasurementID = value.MeasurementID;
					}
					else
					{
						this._MeasurementID = default(int);
					}
					this.SendPropertyChanged("Measurement");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Projects")]
	public partial class Project : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectID;
		
		private string _ProjectName;
		
		private EntitySet<Measurement_Project> _Measurement_Projects;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnProjectNameChanging(string value);
    partial void OnProjectNameChanged();
    #endregion
		
		public Project()
		{
			this._Measurement_Projects = new EntitySet<Measurement_Project>(new Action<Measurement_Project>(this.attach_Measurement_Projects), new Action<Measurement_Project>(this.detach_Measurement_Projects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this.OnProjectNameChanging(value);
					this.SendPropertyChanging();
					this._ProjectName = value;
					this.SendPropertyChanged("ProjectName");
					this.OnProjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Measurement_Project", Storage="_Measurement_Projects", ThisKey="ProjectID", OtherKey="ProjectID")]
		public EntitySet<Measurement_Project> Measurement_Projects
		{
			get
			{
				return this._Measurement_Projects;
			}
			set
			{
				this._Measurement_Projects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Measurement_Projects(Measurement_Project entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Measurement_Projects(Measurement_Project entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Measurements")]
	public partial class Measurement : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MeasurementID;
		
		private string _MeasurementName;
		
		private int _Channel;
		
		private int _SampleID;
		
		private string _SampleRemark;
		
		private string _Orientation;
		
		private System.DateTime _StartTime;
		
		private bool _Runs;
		
		private double _Progress;
		
		private System.Nullable<System.DateTime> _Remaining;
		
		private int _NumOfChannels;
		
		private System.Data.Linq.Binary _SpectrumYByte;
		
		private System.Data.Linq.Binary _SpectrumYCalculatedByte;
		
		private string _StopType;
		
		private double _StopValue;
		
		private System.DateTime _CurrentDuration;
		
		private double _CurrentCharge;
		
		private long _CurrentCounts;
		
		private long _CurrentChopperCounts;
		
		private double _EnergyCalOffset;
		
		private double _EnergyCalLinear;
		
		private double _EnergyCalQuadratic;
		
		private string _Chamber;
		
		private int _IncomingIonAtomicNumber;
		
		private double _IncomingIonEnergy;
		
		private double _IncomingIonAngle;
		
		private double _OutcomingIonAngle;
		
		private double _SolidAngle;
		
		private System.Nullable<double> _X;
		
		private System.Nullable<double> _Y;
		
		private System.Nullable<double> _Phi;
		
		private System.Nullable<double> _Theta;
		
		private EntitySet<Measurement_Project> _Measurement_Projects;
		
		private EntityRef<Sample> _Sample;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMeasurementIDChanging(int value);
    partial void OnMeasurementIDChanged();
    partial void OnMeasurementNameChanging(string value);
    partial void OnMeasurementNameChanged();
    partial void OnChannelChanging(int value);
    partial void OnChannelChanged();
    partial void OnSampleIDChanging(int value);
    partial void OnSampleIDChanged();
    partial void OnSampleRemarkChanging(string value);
    partial void OnSampleRemarkChanged();
    partial void OnOrientationChanging(string value);
    partial void OnOrientationChanged();
    partial void OnStartTimeChanging(System.DateTime value);
    partial void OnStartTimeChanged();
    partial void OnRunsChanging(bool value);
    partial void OnRunsChanged();
    partial void OnProgressChanging(double value);
    partial void OnProgressChanged();
    partial void OnRemainingChanging(System.Nullable<System.DateTime> value);
    partial void OnRemainingChanged();
    partial void OnNumOfChannelsChanging(int value);
    partial void OnNumOfChannelsChanged();
    partial void OnSpectrumYByteChanging(System.Data.Linq.Binary value);
    partial void OnSpectrumYByteChanged();
    partial void OnSpectrumYCalculatedByteChanging(System.Data.Linq.Binary value);
    partial void OnSpectrumYCalculatedByteChanged();
    partial void OnStopTypeChanging(string value);
    partial void OnStopTypeChanged();
    partial void OnStopValueChanging(double value);
    partial void OnStopValueChanged();
    partial void OnCurrentDurationChanging(System.DateTime value);
    partial void OnCurrentDurationChanged();
    partial void OnCurrentChargeChanging(double value);
    partial void OnCurrentChargeChanged();
    partial void OnCurrentCountsChanging(long value);
    partial void OnCurrentCountsChanged();
    partial void OnCurrentChopperCountsChanging(long value);
    partial void OnCurrentChopperCountsChanged();
    partial void OnEnergyCalOffsetChanging(double value);
    partial void OnEnergyCalOffsetChanged();
    partial void OnEnergyCalLinearChanging(double value);
    partial void OnEnergyCalLinearChanged();
    partial void OnEnergyCalQuadraticChanging(double value);
    partial void OnEnergyCalQuadraticChanged();
    partial void OnChamberChanging(string value);
    partial void OnChamberChanged();
    partial void OnIncomingIonAtomicNumberChanging(int value);
    partial void OnIncomingIonAtomicNumberChanged();
    partial void OnIncomingIonEnergyChanging(double value);
    partial void OnIncomingIonEnergyChanged();
    partial void OnIncomingIonAngleChanging(double value);
    partial void OnIncomingIonAngleChanged();
    partial void OnOutcomingIonAngleChanging(double value);
    partial void OnOutcomingIonAngleChanged();
    partial void OnSolidAngleChanging(double value);
    partial void OnSolidAngleChanged();
    partial void OnXChanging(System.Nullable<double> value);
    partial void OnXChanged();
    partial void OnYChanging(System.Nullable<double> value);
    partial void OnYChanged();
    partial void OnPhiChanging(System.Nullable<double> value);
    partial void OnPhiChanged();
    partial void OnThetaChanging(System.Nullable<double> value);
    partial void OnThetaChanged();
    #endregion
		
		public Measurement()
		{
			this._Measurement_Projects = new EntitySet<Measurement_Project>(new Action<Measurement_Project>(this.attach_Measurement_Projects), new Action<Measurement_Project>(this.detach_Measurement_Projects));
			this._Sample = default(EntityRef<Sample>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeasurementID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MeasurementID
		{
			get
			{
				return this._MeasurementID;
			}
			set
			{
				if ((this._MeasurementID != value))
				{
					this.OnMeasurementIDChanging(value);
					this.SendPropertyChanging();
					this._MeasurementID = value;
					this.SendPropertyChanged("MeasurementID");
					this.OnMeasurementIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeasurementName", DbType="NVarChar(50)")]
		public string MeasurementName
		{
			get
			{
				return this._MeasurementName;
			}
			set
			{
				if ((this._MeasurementName != value))
				{
					this.OnMeasurementNameChanging(value);
					this.SendPropertyChanging();
					this._MeasurementName = value;
					this.SendPropertyChanged("MeasurementName");
					this.OnMeasurementNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Channel", DbType="Int NOT NULL")]
		public int Channel
		{
			get
			{
				return this._Channel;
			}
			set
			{
				if ((this._Channel != value))
				{
					this.OnChannelChanging(value);
					this.SendPropertyChanging();
					this._Channel = value;
					this.SendPropertyChanged("Channel");
					this.OnChannelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SampleID", DbType="Int NOT NULL")]
		public int SampleID
		{
			get
			{
				return this._SampleID;
			}
			set
			{
				if ((this._SampleID != value))
				{
					if (this._Sample.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSampleIDChanging(value);
					this.SendPropertyChanging();
					this._SampleID = value;
					this.SendPropertyChanged("SampleID");
					this.OnSampleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SampleRemark", DbType="NVarChar(50)")]
		public string SampleRemark
		{
			get
			{
				return this._SampleRemark;
			}
			set
			{
				if ((this._SampleRemark != value))
				{
					this.OnSampleRemarkChanging(value);
					this.SendPropertyChanging();
					this._SampleRemark = value;
					this.SendPropertyChanged("SampleRemark");
					this.OnSampleRemarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Orientation", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Orientation
		{
			get
			{
				return this._Orientation;
			}
			set
			{
				if ((this._Orientation != value))
				{
					this.OnOrientationChanging(value);
					this.SendPropertyChanging();
					this._Orientation = value;
					this.SendPropertyChanged("Orientation");
					this.OnOrientationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Runs", DbType="Bit NOT NULL")]
		public bool Runs
		{
			get
			{
				return this._Runs;
			}
			set
			{
				if ((this._Runs != value))
				{
					this.OnRunsChanging(value);
					this.SendPropertyChanging();
					this._Runs = value;
					this.SendPropertyChanged("Runs");
					this.OnRunsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Progress", DbType="Float NOT NULL")]
		public double Progress
		{
			get
			{
				return this._Progress;
			}
			set
			{
				if ((this._Progress != value))
				{
					this.OnProgressChanging(value);
					this.SendPropertyChanging();
					this._Progress = value;
					this.SendPropertyChanged("Progress");
					this.OnProgressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remaining", DbType="DateTime")]
		public System.Nullable<System.DateTime> Remaining
		{
			get
			{
				return this._Remaining;
			}
			set
			{
				if ((this._Remaining != value))
				{
					this.OnRemainingChanging(value);
					this.SendPropertyChanging();
					this._Remaining = value;
					this.SendPropertyChanged("Remaining");
					this.OnRemainingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumOfChannels", DbType="Int NOT NULL")]
		public int NumOfChannels
		{
			get
			{
				return this._NumOfChannels;
			}
			set
			{
				if ((this._NumOfChannels != value))
				{
					this.OnNumOfChannelsChanging(value);
					this.SendPropertyChanging();
					this._NumOfChannels = value;
					this.SendPropertyChanged("NumOfChannels");
					this.OnNumOfChannelsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpectrumYByte", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary SpectrumYByte
		{
			get
			{
				return this._SpectrumYByte;
			}
			set
			{
				if ((this._SpectrumYByte != value))
				{
					this.OnSpectrumYByteChanging(value);
					this.SendPropertyChanging();
					this._SpectrumYByte = value;
					this.SendPropertyChanged("SpectrumYByte");
					this.OnSpectrumYByteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpectrumYCalculatedByte", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary SpectrumYCalculatedByte
		{
			get
			{
				return this._SpectrumYCalculatedByte;
			}
			set
			{
				if ((this._SpectrumYCalculatedByte != value))
				{
					this.OnSpectrumYCalculatedByteChanging(value);
					this.SendPropertyChanging();
					this._SpectrumYCalculatedByte = value;
					this.SendPropertyChanged("SpectrumYCalculatedByte");
					this.OnSpectrumYCalculatedByteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StopType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StopType
		{
			get
			{
				return this._StopType;
			}
			set
			{
				if ((this._StopType != value))
				{
					this.OnStopTypeChanging(value);
					this.SendPropertyChanging();
					this._StopType = value;
					this.SendPropertyChanged("StopType");
					this.OnStopTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StopValue", DbType="Float NOT NULL")]
		public double StopValue
		{
			get
			{
				return this._StopValue;
			}
			set
			{
				if ((this._StopValue != value))
				{
					this.OnStopValueChanging(value);
					this.SendPropertyChanging();
					this._StopValue = value;
					this.SendPropertyChanged("StopValue");
					this.OnStopValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentDuration", DbType="DateTime NOT NULL")]
		public System.DateTime CurrentDuration
		{
			get
			{
				return this._CurrentDuration;
			}
			set
			{
				if ((this._CurrentDuration != value))
				{
					this.OnCurrentDurationChanging(value);
					this.SendPropertyChanging();
					this._CurrentDuration = value;
					this.SendPropertyChanged("CurrentDuration");
					this.OnCurrentDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentCharge", DbType="Float NOT NULL")]
		public double CurrentCharge
		{
			get
			{
				return this._CurrentCharge;
			}
			set
			{
				if ((this._CurrentCharge != value))
				{
					this.OnCurrentChargeChanging(value);
					this.SendPropertyChanging();
					this._CurrentCharge = value;
					this.SendPropertyChanged("CurrentCharge");
					this.OnCurrentChargeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentCounts", DbType="BigInt NOT NULL")]
		public long CurrentCounts
		{
			get
			{
				return this._CurrentCounts;
			}
			set
			{
				if ((this._CurrentCounts != value))
				{
					this.OnCurrentCountsChanging(value);
					this.SendPropertyChanging();
					this._CurrentCounts = value;
					this.SendPropertyChanged("CurrentCounts");
					this.OnCurrentCountsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentChopperCounts", DbType="BigInt NOT NULL")]
		public long CurrentChopperCounts
		{
			get
			{
				return this._CurrentChopperCounts;
			}
			set
			{
				if ((this._CurrentChopperCounts != value))
				{
					this.OnCurrentChopperCountsChanging(value);
					this.SendPropertyChanging();
					this._CurrentChopperCounts = value;
					this.SendPropertyChanged("CurrentChopperCounts");
					this.OnCurrentChopperCountsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnergyCalOffset", DbType="Float NOT NULL")]
		public double EnergyCalOffset
		{
			get
			{
				return this._EnergyCalOffset;
			}
			set
			{
				if ((this._EnergyCalOffset != value))
				{
					this.OnEnergyCalOffsetChanging(value);
					this.SendPropertyChanging();
					this._EnergyCalOffset = value;
					this.SendPropertyChanged("EnergyCalOffset");
					this.OnEnergyCalOffsetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnergyCalLinear", DbType="Float NOT NULL")]
		public double EnergyCalLinear
		{
			get
			{
				return this._EnergyCalLinear;
			}
			set
			{
				if ((this._EnergyCalLinear != value))
				{
					this.OnEnergyCalLinearChanging(value);
					this.SendPropertyChanging();
					this._EnergyCalLinear = value;
					this.SendPropertyChanged("EnergyCalLinear");
					this.OnEnergyCalLinearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnergyCalQuadratic", DbType="Float NOT NULL")]
		public double EnergyCalQuadratic
		{
			get
			{
				return this._EnergyCalQuadratic;
			}
			set
			{
				if ((this._EnergyCalQuadratic != value))
				{
					this.OnEnergyCalQuadraticChanging(value);
					this.SendPropertyChanging();
					this._EnergyCalQuadratic = value;
					this.SendPropertyChanged("EnergyCalQuadratic");
					this.OnEnergyCalQuadraticChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Chamber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Chamber
		{
			get
			{
				return this._Chamber;
			}
			set
			{
				if ((this._Chamber != value))
				{
					this.OnChamberChanging(value);
					this.SendPropertyChanging();
					this._Chamber = value;
					this.SendPropertyChanged("Chamber");
					this.OnChamberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncomingIonAtomicNumber", DbType="Int NOT NULL")]
		public int IncomingIonAtomicNumber
		{
			get
			{
				return this._IncomingIonAtomicNumber;
			}
			set
			{
				if ((this._IncomingIonAtomicNumber != value))
				{
					this.OnIncomingIonAtomicNumberChanging(value);
					this.SendPropertyChanging();
					this._IncomingIonAtomicNumber = value;
					this.SendPropertyChanged("IncomingIonAtomicNumber");
					this.OnIncomingIonAtomicNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncomingIonEnergy", DbType="Float NOT NULL")]
		public double IncomingIonEnergy
		{
			get
			{
				return this._IncomingIonEnergy;
			}
			set
			{
				if ((this._IncomingIonEnergy != value))
				{
					this.OnIncomingIonEnergyChanging(value);
					this.SendPropertyChanging();
					this._IncomingIonEnergy = value;
					this.SendPropertyChanged("IncomingIonEnergy");
					this.OnIncomingIonEnergyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncomingIonAngle", DbType="Float NOT NULL")]
		public double IncomingIonAngle
		{
			get
			{
				return this._IncomingIonAngle;
			}
			set
			{
				if ((this._IncomingIonAngle != value))
				{
					this.OnIncomingIonAngleChanging(value);
					this.SendPropertyChanging();
					this._IncomingIonAngle = value;
					this.SendPropertyChanged("IncomingIonAngle");
					this.OnIncomingIonAngleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutcomingIonAngle", DbType="Float NOT NULL")]
		public double OutcomingIonAngle
		{
			get
			{
				return this._OutcomingIonAngle;
			}
			set
			{
				if ((this._OutcomingIonAngle != value))
				{
					this.OnOutcomingIonAngleChanging(value);
					this.SendPropertyChanging();
					this._OutcomingIonAngle = value;
					this.SendPropertyChanged("OutcomingIonAngle");
					this.OnOutcomingIonAngleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SolidAngle", DbType="Float NOT NULL")]
		public double SolidAngle
		{
			get
			{
				return this._SolidAngle;
			}
			set
			{
				if ((this._SolidAngle != value))
				{
					this.OnSolidAngleChanging(value);
					this.SendPropertyChanging();
					this._SolidAngle = value;
					this.SendPropertyChanged("SolidAngle");
					this.OnSolidAngleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_X", DbType="Float")]
		public System.Nullable<double> X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this.OnXChanging(value);
					this.SendPropertyChanging();
					this._X = value;
					this.SendPropertyChanged("X");
					this.OnXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Y", DbType="Float")]
		public System.Nullable<double> Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this.OnYChanging(value);
					this.SendPropertyChanging();
					this._Y = value;
					this.SendPropertyChanged("Y");
					this.OnYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phi", DbType="Float")]
		public System.Nullable<double> Phi
		{
			get
			{
				return this._Phi;
			}
			set
			{
				if ((this._Phi != value))
				{
					this.OnPhiChanging(value);
					this.SendPropertyChanging();
					this._Phi = value;
					this.SendPropertyChanged("Phi");
					this.OnPhiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Theta", DbType="Float")]
		public System.Nullable<double> Theta
		{
			get
			{
				return this._Theta;
			}
			set
			{
				if ((this._Theta != value))
				{
					this.OnThetaChanging(value);
					this.SendPropertyChanging();
					this._Theta = value;
					this.SendPropertyChanged("Theta");
					this.OnThetaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Measurement_Measurement_Project", Storage="_Measurement_Projects", ThisKey="MeasurementID", OtherKey="MeasurementID")]
		public EntitySet<Measurement_Project> Measurement_Projects
		{
			get
			{
				return this._Measurement_Projects;
			}
			set
			{
				this._Measurement_Projects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sample_Measurement", Storage="_Sample", ThisKey="SampleID", OtherKey="SampleID", IsForeignKey=true)]
		public Sample Sample
		{
			get
			{
				return this._Sample.Entity;
			}
			set
			{
				Sample previousValue = this._Sample.Entity;
				if (((previousValue != value) 
							|| (this._Sample.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sample.Entity = null;
						previousValue.Measurements.Remove(this);
					}
					this._Sample.Entity = value;
					if ((value != null))
					{
						value.Measurements.Add(this);
						this._SampleID = value.SampleID;
					}
					else
					{
						this._SampleID = default(int);
					}
					this.SendPropertyChanged("Sample");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Measurement_Projects(Measurement_Project entity)
		{
			this.SendPropertyChanging();
			entity.Measurement = this;
		}
		
		private void detach_Measurement_Projects(Measurement_Project entity)
		{
			this.SendPropertyChanging();
			entity.Measurement = null;
		}
	}
}
#pragma warning restore 1591
