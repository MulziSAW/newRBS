<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
  </configSections>
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5.2" />
  </startup>

  <system.diagnostics>
    <sharedListeners>
      <add name="ColoredConsole" type="Essential.Diagnostics.ColoredConsoleTraceListener, Essential.Diagnostics" />

      <add name="Logfile" type="Essential.Diagnostics.RollingFileTraceListener, Essential.Diagnostics" initializeData="Logfile.log">
        <filter type="System.Diagnostics.EventTypeFilter" initializeData="Information" />
      </add>
    <add name="bufferedEmail" type="Essential.Diagnostics.BufferedEmailTraceListener, Essential.Diagnostics" initializeData="user1@example.org,user2@example.org">
        <!--
          Adds formatted trace messages to a buffer and sends an email when the process 
          exits, or on request.
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=BufferedEmailTraceListener
        -->
        <filter type="System.Diagnostics.EventTypeFilter" initializeData="Information" />
      </add><add name="coloredconsole" type="Essential.Diagnostics.ColoredConsoleTraceListener, Essential.Diagnostics" template="{DateTime:HH':'mm':'ssZ} [{Thread}] {EventType} {Source} {Id}: {Message}{Data}" convertWriteToEvent="true">
        <!--
          Writes to the console output or error stream, using color to highlight 
          event types and allowing a customised output format.
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=ColoredConsoleTraceListener
        -->
      </add><add name="email" type="Essential.Diagnostics.EmailTraceListener, Essential.Diagnostics" initializeData="user1@example.org,user2@example.org">
        <!--
	        Sends each trace message received in an email, using the specified subject and 
          body templates. Note: Set a filter to avoid flooding.
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=EmailTraceListener
        -->
        <filter type="System.Diagnostics.EventTypeFilter" initializeData="Warning" />
      </add><add name="inmemory" type="Essential.Diagnostics.InMemoryTraceListener, Essential.Diagnostics" initializeData="100">
        <!--
          Records and immutable copy of trace events in memory, within a circular buffer
          of the specified size. 
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=InMemoryTraceListener
  	    -->
      </add><add name="rollingfile" type="Essential.Diagnostics.RollingFileTraceListener, Essential.Diagnostics" initializeData="C:\Temp\Logs\{ApplicationName}-{DateTime:yyyy-MM-dd}.log" convertWriteToEvent="true">
        <!--
          Writes to a text file, rolling to a new file based on a filename template 
          (usually including the date).
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=RollingFileTraceListener
        -->
      </add><add name="rollingxml" type="Essential.Diagnostics.RollingXmlTraceListener, Essential.Diagnostics" initializeData="C:\Temp\Logs\{ApplicationName}-{DateTime:yyyyMMdd}.svclog">
        <!--
          Writes writes E2ETraceEvent XML fragments to a text file, rolling to a new 
          file based on a filename template (usually including the date).
          The E2ETraceEvent XML fragment format can be read by the Service Trace Viewer tool.
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=RollingXmlTraceListener
        -->
      </add><add name="sqldatabase" type="Essential.Diagnostics.SqlDatabaseTraceListener, Essential.Diagnostics" initializeData="diagnosticsdb" applicationName="Diagnostics.Sample">
        <!--
          Trace listener that writes to the database connection specified into a
          table created by the diagnostics_regsql.exe tool (in the package tools directory).
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=SqlDatabaseTraceListener
        -->
      </add></sharedListeners>
    <sources>
      <source name="CAEN_x730" switchValue="All">
        <listeners>
          <clear />
          <add name="ColoredConsole" />
          <add name="Logfile" />
        </listeners>
      </source>
      <source name="newRBS_Console" switchValue="All">
        <listeners>
          <clear />
          <add name="ColoredConsole" />
          <add name="Logfile" />
        </listeners>
      </source>
      <source name="MainViewModel" switchValue="All">
        <listeners>
          <clear />
          <add name="ColoredConsole" />
          <add name="Logfile" />
        </listeners>
      </source>
      <source name="MeasurementPlotViewModel" switchValue="All">
        <listeners>
          <clear />
          <add name="ColoredConsole" />
          <add name="Logfile" />
        </listeners>
      </source>
      <source name="DataSpectra" switchValue="All">
        <listeners>
          <clear />
          <add name="ColoredConsole" />
          <add name="Logfile" />
        </listeners>
      </source>
      
      <!--
        = Sample Source =
      <source name=""
              switchValue="All|None|Critical|Error|Warning|Information|Verbose|ActivityTracing"
              switchName="">
        <listeners>
          <clear />
          <add name="" />
          <add name="" />
        </listeners>
      </source>
      --></sources>
    <!--
    --><trace autoflush="true" indentsize="0">
    <listeners>
        <!--
          Legacy Trace.Write() statements (not using a TraceSource).
          Turn indent off to avoid confusion for multithreaded traces,
          and clear the default listener for performance.
        -->
        <clear />
      </listeners></trace>
  <switches>
      <!--
          Specify switchName (instead of switchValue) to use the same
          switch for multiple sources.
          Values can either be SourceLevels name values, decimal,
          or hexadecimal.
        -->
      <add name="SourceSwitch1" value="None,Critical,Error,Warning,Information,Verbose,ActivityTracing,All" />
      <add name="SourceSwitch2" value="0,1,3,7,15,31,0xFF00,0xFFFF" />
    </switches></system.diagnostics>

  <runtime>

    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">

      <dependentAssembly>

        <assemblyIdentity name="OxyPlot" publicKeyToken="638079a8f0bd61e9" culture="neutral" />

        <bindingRedirect oldVersion="0.0.0.0-2014.1.546.0" newVersion="2014.1.546.0" />

      </dependentAssembly>

    </assemblyBinding>

  </runtime>
<connectionStrings>
  <add name="newRBS_GUI.Properties.Settings.p4mist_dbConnectionString2"
    connectionString="Data Source=SVRH;Initial Catalog=p4mist_db;Persist Security Info=True;User ID=p4mist;Password=testtesttesttest"
    providerName="System.Data.SqlClient" />
</connectionStrings><system.net>
    <mailSettings>
      <smtp deliveryMethod="SpecifiedPickupDirectory" from="diagnostics@example.org">
        <!--
          Used by email trace listeners. For production, or if using a test SMTP server 
          such as smtp4dev, change to deliveryMethod="Network" and specify your mail host.
        -->
        <network host="localhost" defaultCredentials="true" />
        <specifiedPickupDirectory pickupDirectoryLocation="C:\Temp\MailPickup" />
      </smtp>
    </mailSettings>
  </system.net><system.data>
    <DbProviderFactories>
      <remove invariant="MySql.Data.MySqlClient" />
      <add name="MySQL Data Provider" invariant="MySql.Data.MySqlClient" description=".Net Framework Data Provider for MySQL" type="MySql.Data.MySqlClient.MySqlClientFactory, MySql.Data, Version=6.9.7.0, Culture=neutral, PublicKeyToken=c5687fc88969c44d" />
    </DbProviderFactories>
  </system.data></configuration>